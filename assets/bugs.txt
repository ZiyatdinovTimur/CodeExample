Bug #1.
    1)  if(mc < -bound || mc > bound )
              return false;
            else
              maxCredit = -mc;

            return true;
    2) 3000
    3) Уставнавливается максимальный кредит,когда аккаунт не заблокирован
    4) if(mc < -bound || mc > bound || !blocked)
                     return false;
                   else
                     maxCredit = -mc;

                   return true;
Bug #2.
    1)  if( mc < -bound || mc > bound || !blocked)
              return false;
            else
              maxCredit = -mc;

            return true;
    2) -300
    3) Уставнавливается максимальный кредит,когда передано отрицательное значение
    4) if( mc<0 || mc < -bound || mc > bound || !blocked)
                     return false;
                   else
                     maxCredit = -mc;

                   return true;

Bug #3.
    1)  public boolean deposit(int sum) {
            if (blocked)
                return false;
            else if (sum < 0 || sum > bound)
                return false;
            else {
                balance += sum;
                return true;
            }
        }
    2) Сначала account.bound / 2, потом (account.bound / 2) + 10
    3) Не выполняется пункт 8 для deposit: "Результат операций deposit(int sum) и withdraw(int sum), влекущий за собой
       изменение баланса, превосходящее BOUND, должен быть false, текущая сумма на счетепри этом остается неизменной"
    4) public boolean deposit(int sum) {
           if (blocked)
               return false;
           else if (sum < 0 || sum > bound || sum >= bound - balance) // added last check
               return false;
           else {
               balance += sum;
               return true;
           }
       }

Bug #4.
      1)  boolean blocked = false;
          int bound = 1000000;
          int balance = 0;
          int maxCredit = -1000;

          public boolean setMaxCredit(int mc) {
                  if (mc < 0 || mc < -bound || mc > bound || !blocked)

      2) Присвоить maxCredit положительное значение
      3) Неприватные поля ведут к возможным уязвимостям и ошибкам
      4)  private boolean blocked = false;
          private int bound = 1000000;
          private int balance = 0;
          private int maxCredit = -1000;

          public boolean setMaxCredit(int mc) {
              if (mc < 0 || mc > bound || !blocked)
              // раз у нас нет setter'а для bound, то bound всегда > 0 (если мы не вспоминаем про reflection),
              // и mc < 0 перекрывает mc < -bound и смысла тогда в mc < -bound нет

          public int getBound() { // на bound нет каких-то условий в заднии, поэтому только геттер
              return bound;
          }